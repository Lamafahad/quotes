{"version":3,"sources":["Fav.js","Home.js","RandomQuote.js","App.js","serviceWorker.js","index.js"],"names":["Fav","props","mainPage","mylist","length","map","item","i","key","className","style","maxWidth","class","quote","author","clearItem","onClick","clearAll","Home","RandomQuote","getNewQuote","getQuote","state","this","axios","get","then","res","data","quotes","randomQuote","Math","floor","random","setState","id","myList","Component","App","listItem","qoute","indexx","indexOf","splice","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.881c4f31.chunk.js","sourcesContent":["import React from 'react';\n\nconst Fav = (props) => {\n\n    let mainPage;\n    if(props.mylist.length == 0){\n        mainPage = <h1>you dont have any favourite</h1>\n    }\n\n    else{\n        mainPage = props.mylist.map((item,i)=> {\n            return     <div  key={i} className=\"card border-secondary mb-3\" style={{maxWidth: \"400px\"}} >\n                           <div class=\"card-body text-secondary\">\n                            <h5 className=\"card-title\">{item.quote}</h5>\n                            <p className=\"card-text\">{item.author}</p>\n                        </div>\n                        <button className=\"btn btn-primary\" className='btn btn-warning' onClick={()=>props.clearItem(item)} >Clear </button>\n                     </div>\n        })\n    }\n    return(\n     <div>\n        <div className=\"card-deck\">\n         {mainPage}\n         </div>\n     <button class=\"btn btn-light\" onClick={()=>props.clearAll()}> Clear All </button>\n     </div>\n    );\n}\n\n\n\n\n\n\nexport default Fav;\n","import React from 'react';\n\n\nconst Home = (props) => {\n    return(\n        <div>\n            <h1>Mind Quotes</h1>\n            <h2>Find the best random quotes and create your own list </h2> <br></br> <h2>and favourites pages easily!</h2>\n        </div>\n\n    );\n}\n\n\n\n\nexport default Home;\n","import React, {Component} from 'react';\nimport axios from 'axios';\n\n\n\n    class RandomQuote extends Component {\n\n      constructor(props){\n          super(props)\n          this.state = {\n              quote: '',\n              author: '',\n            } \n          }\n        \n          componentDidMount() {\n            this.getQuote()\n         }\n        \n         getQuote() {\n           let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n        \n           axios.get(url)\n           .then(res => {\n                  let data = res.data.quotes\n                  let quoteNum = Math.floor(Math.random() * data.length) //quote number\n                  let randomQuote = data[quoteNum] //actual quote\n        \n                  this.setState({\n                     quote: randomQuote['quote'],\n                     author: randomQuote['author']\n                  })\n               })\n         }\n        \n         getNewQuote = () => {\n          this.getQuote()\n         }\n        \n         render() {\n            const { quote, author } = this.state;\n\n            return(\n\n                <div id='wrapper'>\n                <h3 class='title'>Random Quote App</h3>\n                 \n                \n                <div id='quote-box'>\n                   <div id='text'> <p class=\"text-center\"> <p>“</p> {quote} <p>“</p> </p></div>\n                   <div id='author'> <h5 class=\"text-center\"> {author} </h5></div>\n                </div>\n\n                <div>\n                <button id='buttons' onClick={this.getNewQuote}>new quote</button> \n                <button id='buttons' onClick={()=>this.props.myList(this.state)}>Like</button>\n                </div>\n             </div>\n\n            );\n}\n    }\n\n\nexport default RandomQuote;\n\n","import './App.css';\nimport Fav from './Fav';\nimport Home from './Home';\nimport RandomQuote from './RandomQuote'\nimport axios from 'axios';\nimport React, {Component} from 'react';\n\n\nimport {BrowserRouter as Router, Route, Link, Switch} from 'react-router-dom';\n\n class App extends Component {\n\n\n  constructor(props){\n    super(props)\n    this.state = {\n      mylist: [],\n    }\n  }\n\n /*  clearList = (e) => {\n    this.setState({\n      myList: []\n    });\n  } */\n\n\n  myList = (listItem)=> {\n    this.setState({\n      mylist: [...this.state.mylist, listItem]\n    })\n  }\n  \n  clearAll = () =>{\n  this.setState({\n    mylist: [],\n  })\n  }\n\n  clearItem = (qoute) => {\n    const mylist = this.state.mylist; //copy of original \n    const indexx = mylist.indexOf(qoute); //where is the qoute\n    mylist.splice(indexx, 1)\n    this.setState({mylist})\n}\n\n\n render() {\n    return (\n\n     \n<Router>\n        \n          <nav className=\"navbar navbar-expand-lg p-3 p-3 mb-2 bg-warning \">\n\n          <Link className=\"navbar-brand text-white\"  to=\"/\">Home</Link>\n          <Link className=\"navbar-brand text-white\" to=\"/randomQuote\">Quote of the Day</Link>\n          <Link className=\"navbar-brand text-white\" to=\"/fav\">Favorites</Link>\n              \n          </nav>\n           \n         <div>\n         <Switch>\n           <Route exact path='/' component={Home} />\n           <Route exact path='/randomQuote' component={()=> <RandomQuote myList={this.myList} />} />\n           <Route path= '/fav' component={()=> <Fav clearAll={this.clearAll} mylist={this.state.mylist} clearItem={this.clearItem}/> } />\n         </Switch>\n         </div>\n    \n    </Router>\n    );\n }\n}\n \n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}